/* eslint-disable */
'use strict'

class Among {
    constructor (s, substring_i, result) {
        this.s = s;
        this.substring_i = substring_i;
        this.result = result;
        this.method = null;
    }
}

/**
 * This class was automatically generated by a Snowball to JS compiler
 * It implements the stemming algorithm defined by a snowball script.
 */

class Porter2 {
    constructor () {
        this.a_0 = [
            new Among("arsen", -1, -1),
            new Among("commun", -1, -1),
            new Among("gener", -1, -1)
        ];

        this.a_1 = [
            new Among("'", -1, 1),
            new Among("'s'", 0, 1),
            new Among("'s", -1, 1)
        ];

        this.a_2 = [
            new Among("ied", -1, 2),
            new Among("s", -1, 3),
            new Among("ies", 1, 2),
            new Among("sses", 1, 1),
            new Among("ss", 1, -1),
            new Among("us", 1, -1)
        ];

        this.a_3 = [
            new Among("", -1, 3),
            new Among("bb", 0, 2),
            new Among("dd", 0, 2),
            new Among("ff", 0, 2),
            new Among("gg", 0, 2),
            new Among("bl", 0, 1),
            new Among("mm", 0, 2),
            new Among("nn", 0, 2),
            new Among("pp", 0, 2),
            new Among("rr", 0, 2),
            new Among("at", 0, 1),
            new Among("tt", 0, 2),
            new Among("iz", 0, 1)
        ];

        this.a_4 = [
            new Among("ed", -1, 2),
            new Among("eed", 0, 1),
            new Among("ing", -1, 2),
            new Among("edly", -1, 2),
            new Among("eedly", 3, 1),
            new Among("ingly", -1, 2)
        ];

        this.a_5 = [
            new Among("anci", -1, 3),
            new Among("enci", -1, 2),
            new Among("ogi", -1, 13),
            new Among("li", -1, 16),
            new Among("bli", 3, 12),
            new Among("abli", 4, 4),
            new Among("alli", 3, 8),
            new Among("fulli", 3, 14),
            new Among("lessli", 3, 15),
            new Among("ousli", 3, 10),
            new Among("entli", 3, 5),
            new Among("aliti", -1, 8),
            new Among("biliti", -1, 12),
            new Among("iviti", -1, 11),
            new Among("tional", -1, 1),
            new Among("ational", 14, 7),
            new Among("alism", -1, 8),
            new Among("ation", -1, 7),
            new Among("ization", 17, 6),
            new Among("izer", -1, 6),
            new Among("ator", -1, 7),
            new Among("iveness", -1, 11),
            new Among("fulness", -1, 9),
            new Among("ousness", -1, 10)
        ];

        this.a_6 = [
            new Among("icate", -1, 4),
            new Among("ative", -1, 6),
            new Among("alize", -1, 3),
            new Among("iciti", -1, 4),
            new Among("ical", -1, 4),
            new Among("tional", -1, 1),
            new Among("ational", 5, 2),
            new Among("ful", -1, 5),
            new Among("ness", -1, 5)
        ];

        this.a_7 = [
            new Among("ic", -1, 1),
            new Among("ance", -1, 1),
            new Among("ence", -1, 1),
            new Among("able", -1, 1),
            new Among("ible", -1, 1),
            new Among("ate", -1, 1),
            new Among("ive", -1, 1),
            new Among("ize", -1, 1),
            new Among("iti", -1, 1),
            new Among("al", -1, 1),
            new Among("ism", -1, 1),
            new Among("ion", -1, 2),
            new Among("er", -1, 1),
            new Among("ous", -1, 1),
            new Among("ant", -1, 1),
            new Among("ent", -1, 1),
            new Among("ment", 15, 1),
            new Among("ement", 16, 1)
        ];

        this.a_8 = [
            new Among("e", -1, 1),
            new Among("l", -1, 2)
        ];

        this.a_9 = [
            new Among("succeed", -1, -1),
            new Among("proceed", -1, -1),
            new Among("exceed", -1, -1),
            new Among("canning", -1, -1),
            new Among("inning", -1, -1),
            new Among("earring", -1, -1),
            new Among("herring", -1, -1),
            new Among("outing", -1, -1)
        ];

        this.a_10 = [
            new Among("andes", -1, -1),
            new Among("atlas", -1, -1),
            new Among("bias", -1, -1),
            new Among("cosmos", -1, -1),
            new Among("dying", -1, 3),
            new Among("early", -1, 11),
            new Among("gently", -1, 9),
            new Among("howe", -1, -1),
            new Among("idly", -1, 8),
            new Among("importance", -1, 7),
            new Among("important", -1, -1),
            new Among("lying", -1, 4),
            new Among("news", -1, -1),
            new Among("only", -1, 12),
            new Among("replica", -1, 6),
            new Among("singly", -1, 13),
            new Among("skies", -1, 2),
            new Among("skis", -1, 1),
            new Among("sky", -1, -1),
            new Among("tying", -1, 5),
            new Among("ugly", -1, 10)
        ];

        this.g_v = [17, 65, 16, 1] ;

        this.g_v_WXY = [1, 17, 65, 208, 1] ;

        this.g_valid_LI = [55, 141, 2] ;

        this.B_Y_found = false;
        this.I_p2 = 0;
        this.I_p1 = 0;
    }

    r_prelude ()
    {
        // (, line 25
        // unset Y_found, line 26
        this.B_Y_found = false;
        // do, line 27
        var v_1 = this.cursor;
        var lab0 = true;
        lab0: while (lab0 == true)
        {
            lab0 = false;
            // (, line 27
            // [, line 27
            this.bra = this.cursor;
            // literal, line 27
            if (!(this.eq_s("'")))
            {
                break lab0;
            }
            // ], line 27
            this.ket = this.cursor;
            // delete, line 27
            if (!this.slice_del())
            {
                return false;
            }
        }
        this.cursor = v_1;
        // do, line 28
        var v_2 = this.cursor;
        var lab1 = true;
        lab1: while (lab1 == true)
        {
            lab1 = false;
            // (, line 28
            // [, line 28
            this.bra = this.cursor;
            // literal, line 28
            if (!(this.eq_s("y")))
            {
                break lab1;
            }
            // ], line 28
            this.ket = this.cursor;
            // <-, line 28
            if (!this.slice_from("Y"))
            {
                return false;
            }
            // set Y_found, line 28
            this.B_Y_found = true;
        }
        this.cursor = v_2;
        // do, line 29
        var v_3 = this.cursor;
        var lab2 = true;
        lab2: while (lab2 == true)
        {
            lab2 = false;
            // repeat, line 29
            replab3: while(true)
            {
                var v_4 = this.cursor;
                var lab4 = true;
                lab4: while (lab4 == true)
                {
                    lab4 = false;
                    // (, line 29
                    // goto, line 29
                    golab5: while(true)
                    {
                        var v_5 = this.cursor;
                        var lab6 = true;
                        lab6: while (lab6 == true)
                        {
                            lab6 = false;
                            // (, line 29
                            if (!(this.in_grouping(this.g_v, 97, 121)))
                            {
                                break lab6;
                            }
                            // [, line 29
                            this.bra = this.cursor;
                            // literal, line 29
                            if (!(this.eq_s("y")))
                            {
                                break lab6;
                            }
                            // ], line 29
                            this.ket = this.cursor;
                            this.cursor = v_5;
                            break golab5;
                        }
                        this.cursor = v_5;
                        if (this.cursor >= this.limit)
                        {
                            break lab4;
                        }
                        this.cursor++;
                    }
                    // <-, line 29
                    if (!this.slice_from("Y"))
                    {
                        return false;
                    }
                    // set Y_found, line 29
                    this.B_Y_found = true;
                    continue replab3;
                }
                this.cursor = v_4;
                break replab3;
            }
        }
        this.cursor = v_3;
        return true;
    }

    r_mark_regions ()
    {
        // (, line 32
        this.I_p1 = this.limit;
        this.I_p2 = this.limit;
        // do, line 35
        var v_1 = this.cursor;
        var lab0 = true;
        lab0: while (lab0 == true)
        {
            lab0 = false;
            // (, line 35
            // or, line 41
            var lab1 = true;
            lab1: while (lab1 == true)
            {
                lab1 = false;
                var v_2 = this.cursor;
                var lab2 = true;
                lab2: while (lab2 == true)
                {
                    lab2 = false;
                    // among, line 36
                    if (this.find_among(this.a_0) == 0)
                    {
                        break lab2;
                    }
                    break lab1;
                }
                this.cursor = v_2;
                // (, line 41
                // gopast, line 41
                golab3: while(true)
                {
                    var lab4 = true;
                    lab4: while (lab4 == true)
                    {
                        lab4 = false;
                        if (!(this.in_grouping(this.g_v, 97, 121)))
                        {
                            break lab4;
                        }
                        break golab3;
                    }
                    if (this.cursor >= this.limit)
                    {
                        break lab0;
                    }
                    this.cursor++;
                }
                // gopast, line 41
                golab5: while(true)
                {
                    var lab6 = true;
                    lab6: while (lab6 == true)
                    {
                        lab6 = false;
                        if (!(this.out_grouping(this.g_v, 97, 121)))
                        {
                            break lab6;
                        }
                        break golab5;
                    }
                    if (this.cursor >= this.limit)
                    {
                        break lab0;
                    }
                    this.cursor++;
                }
            }
            // setmark p1, line 42
            this.I_p1 = this.cursor;
            // gopast, line 43
            golab7: while(true)
            {
                var lab8 = true;
                lab8: while (lab8 == true)
                {
                    lab8 = false;
                    if (!(this.in_grouping(this.g_v, 97, 121)))
                    {
                        break lab8;
                    }
                    break golab7;
                }
                if (this.cursor >= this.limit)
                {
                    break lab0;
                }
                this.cursor++;
            }
            // gopast, line 43
            golab9: while(true)
            {
                var lab10 = true;
                lab10: while (lab10 == true)
                {
                    lab10 = false;
                    if (!(this.out_grouping(this.g_v, 97, 121)))
                    {
                        break lab10;
                    }
                    break golab9;
                }
                if (this.cursor >= this.limit)
                {
                    break lab0;
                }
                this.cursor++;
            }
            // setmark p2, line 43
            this.I_p2 = this.cursor;
        }
        this.cursor = v_1;
        return true;
    }

    r_shortv ()
    {
        // (, line 49
        // or, line 51
        var lab0 = true;
        lab0: while (lab0 == true)
        {
            lab0 = false;
            var v_1 = this.limit - this.cursor;
            var lab1 = true;
            lab1: while (lab1 == true)
            {
                lab1 = false;
                // (, line 50
                if (!(this.out_grouping_b(this.g_v_WXY, 89, 121)))
                {
                    break lab1;
                }
                if (!(this.in_grouping_b(this.g_v, 97, 121)))
                {
                    break lab1;
                }
                if (!(this.out_grouping_b(this.g_v, 97, 121)))
                {
                    break lab1;
                }
                break lab0;
            }
            this.cursor = this.limit - v_1;
            // (, line 52
            if (!(this.out_grouping_b(this.g_v, 97, 121)))
            {
                return false;
            }
            if (!(this.in_grouping_b(this.g_v, 97, 121)))
            {
                return false;
            }
            // atlimit, line 52
            if (this.cursor > this.limit_backward)
            {
                return false;
            }
        }
        return true;
    }

    r_R1 ()
    {
        if (!(this.I_p1 <= this.cursor))
        {
            return false;
        }
        return true;
    }

    r_R2 ()
    {
        if (!(this.I_p2 <= this.cursor))
        {
            return false;
        }
        return true;
    }

    r_Step_1a ()
    {
        var among_var;
        // (, line 58
        // try, line 59
        var v_1 = this.limit - this.cursor;
        var lab0 = true;
        lab0: while (lab0 == true)
        {
            lab0 = false;
            // (, line 59
            // [, line 60
            this.ket = this.cursor;
            // substring, line 60
            among_var = this.find_among_b(this.a_1);
            if (among_var == 0)
            {
                this.cursor = this.limit - v_1;
                break lab0;
            }
            // ], line 60
            this.bra = this.cursor;
            switch (among_var) {
                case 0:
                    this.cursor = this.limit - v_1;
                    break lab0;
                case 1:
                    // (, line 62
                    // delete, line 62
                    if (!this.slice_del())
                    {
                        return false;
                    }
                    break;
            }
        }
        // [, line 65
        this.ket = this.cursor;
        // substring, line 65
        among_var = this.find_among_b(this.a_2);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 65
        this.bra = this.cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 66
                // <-, line 66
                if (!this.slice_from("ss"))
                {
                    return false;
                }
                break;
            case 2:
                // (, line 68
                // or, line 68
                var lab1 = true;
                lab1: while (lab1 == true)
                {
                    lab1 = false;
                    var v_2 = this.limit - this.cursor;
                    var lab2 = true;
                    lab2: while (lab2 == true)
                    {
                        lab2 = false;
                        // (, line 68
                        // hop, line 68
                        {
                            var c = this.cursor - 2;
                            if (this.limit_backward > c || c > this.limit)
                            {
                                break lab2;
                            }
                            this.cursor = c;
                        }
                        // <-, line 68
                        if (!this.slice_from("i"))
                        {
                            return false;
                        }
                        break lab1;
                    }
                    this.cursor = this.limit - v_2;
                    // <-, line 68
                    if (!this.slice_from("ie"))
                    {
                        return false;
                    }
                }
                break;
            case 3:
                // (, line 69
                // next, line 69
                if (this.cursor <= this.limit_backward)
                {
                    return false;
                }
                this.cursor--;
                // gopast, line 69
                golab3: while(true)
                {
                    var lab4 = true;
                    lab4: while (lab4 == true)
                    {
                        lab4 = false;
                        if (!(this.in_grouping_b(this.g_v, 97, 121)))
                        {
                            break lab4;
                        }
                        break golab3;
                    }
                    if (this.cursor <= this.limit_backward)
                    {
                        return false;
                    }
                    this.cursor--;
                }
                // delete, line 69
                if (!this.slice_del())
                {
                    return false;
                }
                break;
        }
        return true;
    }

    r_Step_1b ()
    {
        var among_var;
        // (, line 74
        // [, line 75
        this.ket = this.cursor;
        // substring, line 75
        among_var = this.find_among_b(this.a_4);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 75
        this.bra = this.cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 77
                // call R1, line 77
                if (!this.r_R1())
                {
                    return false;
                }
                // <-, line 77
                if (!this.slice_from("ee"))
                {
                    return false;
                }
                break;
            case 2:
                // (, line 79
                // test, line 80
                var v_1 = this.limit - this.cursor;
                // gopast, line 80
                golab0: while(true)
                {
                    var lab1 = true;
                    lab1: while (lab1 == true)
                    {
                        lab1 = false;
                        if (!(this.in_grouping_b(this.g_v, 97, 121)))
                        {
                            break lab1;
                        }
                        break golab0;
                    }
                    if (this.cursor <= this.limit_backward)
                    {
                        return false;
                    }
                    this.cursor--;
                }
                this.cursor = this.limit - v_1;
                // delete, line 80
                if (!this.slice_del())
                {
                    return false;
                }
                // test, line 81
                var v_3 = this.limit - this.cursor;
                // substring, line 81
                among_var = this.find_among_b(this.a_3);
                if (among_var == 0)
                {
                    return false;
                }
                this.cursor = this.limit - v_3;
                switch (among_var) {
                    case 0:
                        return false;
                    case 1:
                        // (, line 83
                        // <+, line 83
                        {
                            var c = this.cursor;
                            this.insert(this.cursor, this.cursor, "e");
                            this.cursor = c;
                        }
                        break;
                    case 2:
                        // (, line 86
                        // [, line 86
                        this.ket = this.cursor;
                        // next, line 86
                        if (this.cursor <= this.limit_backward)
                        {
                            return false;
                        }
                        this.cursor--;
                        // ], line 86
                        this.bra = this.cursor;
                        // delete, line 86
                        if (!this.slice_del())
                        {
                            return false;
                        }
                        break;
                    case 3:
                        // (, line 87
                        // atmark, line 87
                        if (this.cursor != this.I_p1)
                        {
                            return false;
                        }
                        // test, line 87
                        var v_4 = this.limit - this.cursor;
                        // call shortv, line 87
                        if (!this.r_shortv())
                        {
                            return false;
                        }
                        this.cursor = this.limit - v_4;
                        // <+, line 87
                        {
                            var c = this.cursor;
                            this.insert(this.cursor, this.cursor, "e");
                            this.cursor = c;
                        }
                        break;
                }
                break;
        }
        return true;
    }

    r_Step_1c ()
    {
        // (, line 93
        // [, line 94
        this.ket = this.cursor;
        // or, line 94
        var lab0 = true;
        lab0: while (lab0 == true)
        {
            lab0 = false;
            var v_1 = this.limit - this.cursor;
            var lab1 = true;
            lab1: while (lab1 == true)
            {
                lab1 = false;
                // literal, line 94
                if (!(this.eq_s_b("y")))
                {
                    break lab1;
                }
                break lab0;
            }
            this.cursor = this.limit - v_1;
            // literal, line 94
            if (!(this.eq_s_b("Y")))
            {
                return false;
            }
        }
        // ], line 94
        this.bra = this.cursor;
        if (!(this.out_grouping_b(this.g_v, 97, 121)))
        {
            return false;
        }
        // not, line 95
        {
            var v_2 = this.limit - this.cursor;
            var lab2 = true;
            lab2: while (lab2 == true)
            {
                lab2 = false;
                // atlimit, line 95
                if (this.cursor > this.limit_backward)
                {
                    break lab2;
                }
                return false;
            }
            this.cursor = this.limit - v_2;
        }
        // <-, line 96
        if (!this.slice_from("i"))
        {
            return false;
        }
        return true;
    }

    r_Step_2 ()
    {
        var among_var;
        // (, line 99
        // [, line 100
        this.ket = this.cursor;
        // substring, line 100
        among_var = this.find_among_b(this.a_5);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 100
        this.bra = this.cursor;
        // call R1, line 100
        if (!this.r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 101
                // <-, line 101
                if (!this.slice_from("tion"))
                {
                    return false;
                }
                break;
            case 2:
                // (, line 102
                // <-, line 102
                if (!this.slice_from("ence"))
                {
                    return false;
                }
                break;
            case 3:
                // (, line 103
                // <-, line 103
                if (!this.slice_from("ance"))
                {
                    return false;
                }
                break;
            case 4:
                // (, line 104
                // <-, line 104
                if (!this.slice_from("able"))
                {
                    return false;
                }
                break;
            case 5:
                // (, line 105
                // <-, line 105
                if (!this.slice_from("ent"))
                {
                    return false;
                }
                break;
            case 6:
                // (, line 107
                // <-, line 107
                if (!this.slice_from("ize"))
                {
                    return false;
                }
                break;
            case 7:
                // (, line 109
                // <-, line 109
                if (!this.slice_from("ate"))
                {
                    return false;
                }
                break;
            case 8:
                // (, line 111
                // <-, line 111
                if (!this.slice_from("al"))
                {
                    return false;
                }
                break;
            case 9:
                // (, line 112
                // <-, line 112
                if (!this.slice_from("ful"))
                {
                    return false;
                }
                break;
            case 10:
                // (, line 114
                // <-, line 114
                if (!this.slice_from("ous"))
                {
                    return false;
                }
                break;
            case 11:
                // (, line 116
                // <-, line 116
                if (!this.slice_from("ive"))
                {
                    return false;
                }
                break;
            case 12:
                // (, line 118
                // <-, line 118
                if (!this.slice_from("ble"))
                {
                    return false;
                }
                break;
            case 13:
                // (, line 119
                // literal, line 119
                if (!(this.eq_s_b("l")))
                {
                    return false;
                }
                // <-, line 119
                if (!this.slice_from("og"))
                {
                    return false;
                }
                break;
            case 14:
                // (, line 120
                // <-, line 120
                if (!this.slice_from("ful"))
                {
                    return false;
                }
                break;
            case 15:
                // (, line 121
                // <-, line 121
                if (!this.slice_from("less"))
                {
                    return false;
                }
                break;
            case 16:
                // (, line 122
                if (!(this.in_grouping_b(this.g_valid_LI, 99, 116)))
                {
                    return false;
                }
                // delete, line 122
                if (!this.slice_del())
                {
                    return false;
                }
                break;
        }
        return true;
    }

    r_Step_3 ()
    {
        var among_var;
        // (, line 126
        // [, line 127
        this.ket = this.cursor;
        // substring, line 127
        among_var = this.find_among_b(this.a_6);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 127
        this.bra = this.cursor;
        // call R1, line 127
        if (!this.r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 128
                // <-, line 128
                if (!this.slice_from("tion"))
                {
                    return false;
                }
                break;
            case 2:
                // (, line 129
                // <-, line 129
                if (!this.slice_from("ate"))
                {
                    return false;
                }
                break;
            case 3:
                // (, line 130
                // <-, line 130
                if (!this.slice_from("al"))
                {
                    return false;
                }
                break;
            case 4:
                // (, line 132
                // <-, line 132
                if (!this.slice_from("ic"))
                {
                    return false;
                }
                break;
            case 5:
                // (, line 134
                // delete, line 134
                if (!this.slice_del())
                {
                    return false;
                }
                break;
            case 6:
                // (, line 136
                // call R2, line 136
                if (!this.r_R2())
                {
                    return false;
                }
                // delete, line 136
                if (!this.slice_del())
                {
                    return false;
                }
                break;
        }
        return true;
    }

    r_Step_4 ()
    {
        var among_var;
        // (, line 140
        // [, line 141
        this.ket = this.cursor;
        // substring, line 141
        among_var = this.find_among_b(this.a_7);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 141
        this.bra = this.cursor;
        // call R2, line 141
        if (!this.r_R2())
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 144
                // delete, line 144
                if (!this.slice_del())
                {
                    return false;
                }
                break;
            case 2:
                // (, line 145
                // or, line 145
                var lab0 = true;
                lab0: while (lab0 == true)
                {
                    lab0 = false;
                    var v_1 = this.limit - this.cursor;
                    var lab1 = true;
                    lab1: while (lab1 == true)
                    {
                        lab1 = false;
                        // literal, line 145
                        if (!(this.eq_s_b("s")))
                        {
                            break lab1;
                        }
                        break lab0;
                    }
                    this.cursor = this.limit - v_1;
                    // literal, line 145
                    if (!(this.eq_s_b("t")))
                    {
                        return false;
                    }
                }
                // delete, line 145
                if (!this.slice_del())
                {
                    return false;
                }
                break;
        }
        return true;
    }

    r_Step_5 ()
    {
        var among_var;
        // (, line 149
        // [, line 150
        this.ket = this.cursor;
        // substring, line 150
        among_var = this.find_among_b(this.a_8);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 150
        this.bra = this.cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 151
                // or, line 151
                var lab0 = true;
                lab0: while (lab0 == true)
                {
                    lab0 = false;
                    var v_1 = this.limit - this.cursor;
                    var lab1 = true;
                    lab1: while (lab1 == true)
                    {
                        lab1 = false;
                        // call R2, line 151
                        if (!this.r_R2())
                        {
                            break lab1;
                        }
                        break lab0;
                    }
                    this.cursor = this.limit - v_1;
                    // (, line 151
                    // call R1, line 151
                    if (!this.r_R1())
                    {
                        return false;
                    }
                    // not, line 151
                    {
                        var v_2 = this.limit - this.cursor;
                        var lab2 = true;
                        lab2: while (lab2 == true)
                        {
                            lab2 = false;
                            // call shortv, line 151
                            if (!this.r_shortv())
                            {
                                break lab2;
                            }
                            return false;
                        }
                        this.cursor = this.limit - v_2;
                    }
                }
                // delete, line 151
                if (!this.slice_del())
                {
                    return false;
                }
                break;
            case 2:
                // (, line 152
                // call R2, line 152
                if (!this.r_R2())
                {
                    return false;
                }
                // literal, line 152
                if (!(this.eq_s_b("l")))
                {
                    return false;
                }
                // delete, line 152
                if (!this.slice_del())
                {
                    return false;
                }
                break;
        }
        return true;
    }

    r_exception2 ()
    {
        // (, line 156
        // [, line 158
        this.ket = this.cursor;
        // substring, line 158
        if (this.find_among_b(this.a_9) == 0)
        {
            return false;
        }
        // ], line 158
        this.bra = this.cursor;
        // atlimit, line 158
        if (this.cursor > this.limit_backward)
        {
            return false;
        }
        return true;
    }

    r_exception1 ()
    {
        var among_var;
        // (, line 168
        // [, line 170
        this.bra = this.cursor;
        // substring, line 170
        among_var = this.find_among(this.a_10);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 170
        this.ket = this.cursor;
        // atlimit, line 170
        if (this.cursor < this.limit)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 174
                // <-, line 174
                if (!this.slice_from("ski"))
                {
                    return false;
                }
                break;
            case 2:
                // (, line 175
                // <-, line 175
                if (!this.slice_from("sky"))
                {
                    return false;
                }
                break;
            case 3:
                // (, line 176
                // <-, line 176
                if (!this.slice_from("die"))
                {
                    return false;
                }
                break;
            case 4:
                // (, line 177
                // <-, line 177
                if (!this.slice_from("lie"))
                {
                    return false;
                }
                break;
            case 5:
                // (, line 178
                // <-, line 178
                if (!this.slice_from("tie"))
                {
                    return false;
                }
                break;
            case 6:
                // (, line 179
                // <-, line 179
                if (!this.slice_from("replic"))
                {
                    return false;
                }
                break;
            case 7:
                // (, line 180
                // <-, line 180
                if (!this.slice_from("important"))
                {
                    return false;
                }
                break;
            case 8:
                // (, line 184
                // <-, line 184
                if (!this.slice_from("idl"))
                {
                    return false;
                }
                break;
            case 9:
                // (, line 185
                // <-, line 185
                if (!this.slice_from("gentl"))
                {
                    return false;
                }
                break;
            case 10:
                // (, line 186
                // <-, line 186
                if (!this.slice_from("ugli"))
                {
                    return false;
                }
                break;
            case 11:
                // (, line 187
                // <-, line 187
                if (!this.slice_from("earli"))
                {
                    return false;
                }
                break;
            case 12:
                // (, line 188
                // <-, line 188
                if (!this.slice_from("onli"))
                {
                    return false;
                }
                break;
            case 13:
                // (, line 189
                // <-, line 189
                if (!this.slice_from("singl"))
                {
                    return false;
                }
                break;
        }
        return true;
    }

    r_postlude ()
    {
        // (, line 206
        // Boolean test Y_found, line 206
        if (!this.B_Y_found)
        {
            return false;
        }
        // repeat, line 206
        replab0: while(true)
        {
            var v_1 = this.cursor;
            var lab1 = true;
            lab1: while (lab1 == true)
            {
                lab1 = false;
                // (, line 206
                // goto, line 206
                golab2: while(true)
                {
                    var v_2 = this.cursor;
                    var lab3 = true;
                    lab3: while (lab3 == true)
                    {
                        lab3 = false;
                        // (, line 206
                        // [, line 206
                        this.bra = this.cursor;
                        // literal, line 206
                        if (!(this.eq_s("Y")))
                        {
                            break lab3;
                        }
                        // ], line 206
                        this.ket = this.cursor;
                        this.cursor = v_2;
                        break golab2;
                    }
                    this.cursor = v_2;
                    if (this.cursor >= this.limit)
                    {
                        break lab1;
                    }
                    this.cursor++;
                }
                // <-, line 206
                if (!this.slice_from("y"))
                {
                    return false;
                }
                continue replab0;
            }
            this.cursor = v_1;
            break replab0;
        }
        return true;
    }

    stem ()
    {
        // (, line 208
        // or, line 210
        var lab0 = true;
        lab0: while (lab0 == true)
        {
            lab0 = false;
            var v_1 = this.cursor;
            var lab1 = true;
            lab1: while (lab1 == true)
            {
                lab1 = false;
                // call exception1, line 210
                if (!this.r_exception1())
                {
                    break lab1;
                }
                break lab0;
            }
            this.cursor = v_1;
            var lab2 = true;
            lab2: while (lab2 == true)
            {
                lab2 = false;
                // not, line 211
                {
                    var v_2 = this.cursor;
                    var lab3 = true;
                    lab3: while (lab3 == true)
                    {
                        lab3 = false;
                        // hop, line 211
                        {
                            var c = this.cursor + 3;
                            if (0 > c || c > this.limit)
                            {
                                break lab3;
                            }
                            this.cursor = c;
                        }
                        break lab2;
                    }
                    this.cursor = v_2;
                }
                break lab0;
            }
            this.cursor = v_1;
            // (, line 211
            // do, line 212
            var v_3 = this.cursor;
            var lab4 = true;
            lab4: while (lab4 == true)
            {
                lab4 = false;
                // call prelude, line 212
                if (!this.r_prelude())
                {
                    break lab4;
                }
            }
            this.cursor = v_3;
            // do, line 213
            var v_4 = this.cursor;
            var lab5 = true;
            lab5: while (lab5 == true)
            {
                lab5 = false;
                // call mark_regions, line 213
                if (!this.r_mark_regions())
                {
                    break lab5;
                }
            }
            this.cursor = v_4;
            // backwards, line 214
            this.limit_backward = this.cursor; this.cursor = this.limit;
            // (, line 214
            // do, line 216
            var v_5 = this.limit - this.cursor;
            var lab6 = true;
            lab6: while (lab6 == true)
            {
                lab6 = false;
                // call Step_1a, line 216
                if (!this.r_Step_1a())
                {
                    break lab6;
                }
            }
            this.cursor = this.limit - v_5;
            // or, line 218
            var lab7 = true;
            lab7: while (lab7 == true)
            {
                lab7 = false;
                var v_6 = this.limit - this.cursor;
                var lab8 = true;
                lab8: while (lab8 == true)
                {
                    lab8 = false;
                    // call exception2, line 218
                    if (!this.r_exception2())
                    {
                        break lab8;
                    }
                    break lab7;
                }
                this.cursor = this.limit - v_6;
                // (, line 218
                // do, line 220
                var v_7 = this.limit - this.cursor;
                var lab9 = true;
                lab9: while (lab9 == true)
                {
                    lab9 = false;
                    // call Step_1b, line 220
                    if (!this.r_Step_1b())
                    {
                        break lab9;
                    }
                }
                this.cursor = this.limit - v_7;
                // do, line 221
                var v_8 = this.limit - this.cursor;
                var lab10 = true;
                lab10: while (lab10 == true)
                {
                    lab10 = false;
                    // call Step_1c, line 221
                    if (!this.r_Step_1c())
                    {
                        break lab10;
                    }
                }
                this.cursor = this.limit - v_8;
                // do, line 223
                var v_9 = this.limit - this.cursor;
                var lab11 = true;
                lab11: while (lab11 == true)
                {
                    lab11 = false;
                    // call Step_2, line 223
                    if (!this.r_Step_2())
                    {
                        break lab11;
                    }
                }
                this.cursor = this.limit - v_9;
                // do, line 224
                var v_10 = this.limit - this.cursor;
                var lab12 = true;
                lab12: while (lab12 == true)
                {
                    lab12 = false;
                    // call Step_3, line 224
                    if (!this.r_Step_3())
                    {
                        break lab12;
                    }
                }
                this.cursor = this.limit - v_10;
                // do, line 225
                var v_11 = this.limit - this.cursor;
                var lab13 = true;
                lab13: while (lab13 == true)
                {
                    lab13 = false;
                    // call Step_4, line 225
                    if (!this.r_Step_4())
                    {
                        break lab13;
                    }
                }
                this.cursor = this.limit - v_11;
                // do, line 227
                var v_12 = this.limit - this.cursor;
                var lab14 = true;
                lab14: while (lab14 == true)
                {
                    lab14 = false;
                    // call Step_5, line 227
                    if (!this.r_Step_5())
                    {
                        break lab14;
                    }
                }
                this.cursor = this.limit - v_12;
            }
            this.cursor = this.limit_backward;
            // do, line 230
            var v_13 = this.cursor;
            var lab15 = true;
            lab15: while (lab15 == true)
            {
                lab15 = false;
                // call postlude, line 230
                if (!this.r_postlude())
                {
                    break lab15;
                }
            }
            this.cursor = v_13;
        }
        return true;
    }

    setCurrent (value)
    {
        this.current = value;
    this.cursor = 0;
    this.limit = this.current.length;
    this.limit_backward = 0;
    this.bra = this.cursor;
    this.ket = this.limit;
    }

    /**
     * Get the this.current string.
     */
    getCurrent ()
    {
        return this.current;
    }


    copy_from (other)
    {
    this.current          = other.current;
    this.cursor           = other.cursor;
    this.limit            = other.limit;
    this.limit_backward   = other.limit_backward;
    this.bra              = other.bra;
    this.ket              = other.ket;
    }

    in_grouping (s, min, max)
    {
    if (this.cursor >= this.limit) return false;
    var ch = this.current.charCodeAt(this.cursor);
    if (ch > max || ch < min) return false;
    ch -= min;
    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) return false;
    this.cursor++;
    return true;
    }

    in_grouping_b (s, min, max)
    {
    if (this.cursor <= this.limit_backward) return false;
    var ch = this.current.charCodeAt(this.cursor - 1);
    if (ch > max || ch < min) return false;
    ch -= min;
    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) return false;
    this.cursor--;
    return true;
    }

    out_grouping (s, min, max)
    {
    if (this.cursor >= this.limit) return false;
    var ch = this.current.charCodeAt(this.cursor);
    if (ch > max || ch < min) {
        this.cursor++;
        return true;
    }
    ch -= min;
    if ((s[ch >>> 3] & (0X1 << (ch & 0x7))) == 0) {
        this.cursor++;
        return true;
    }
    return false;
    }

    out_grouping_b (s, min, max)
    {
    if (this.cursor <= this.limit_backward) return false;
    var ch = this.current.charCodeAt(this.cursor - 1);
    if (ch > max || ch < min) {
        this.cursor--;
        return true;
    }
    ch -= min;
    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) {
        this.cursor--;
        return true;
    }
    return false;
    }

    eq_s (s)
    {
    if (this.limit - this.cursor < s.length) return false;
        if (this.current.slice(this.cursor, this.cursor + s.length) != s)
        {
            return false;
        }
    this.cursor += s.length;
    return true;
    }

    eq_s_b (s)
    {
    if (this.cursor - this.limit_backward < s.length) return false;
        if (this.current.slice(this.cursor - s.length, this.cursor) != s)
        {
            return false;
        }
    this.cursor -= s.length;
    return true;
    }

    find_among (v )
    {
    var i = 0;
    var j = v.length;

    var c = this.cursor;
    var l = this.limit;

    var common_i = 0;
    var common_j = 0;

    var first_key_inspected = false;

    while (true)
        {
        var k = i + ((j - i) >>> 1);
        var diff = 0;
        var common = common_i < common_j ? common_i : common_j; // smaller
        var w = v[k];
        var i2;
        for (i2 = common; i2 < w.s.length; i2++)
            {
        if (c + common == l)
                {
            diff = -1;
            break;
        }
        diff = this.current.charCodeAt(c + common) - w.s.charCodeAt(i2);
        if (diff != 0) break;
        common++;
        }
        if (diff < 0)
            {
        j = k;
        common_j = common;
        }
            else
            {
        i = k;
        common_i = common;
        }
        if (j - i <= 1)
            {
        if (i > 0) break; // v->s has been inspected
        if (j == i) break; // only one item in v

        // - but now we need to go round once more to get
        // v->s inspected. This looks messy, but is actually
        // the optimal approach.

        if (first_key_inspected) break;
        first_key_inspected = true;
        }
    }
    while (true)
        {
        var w = v[i];
        if (common_i >= w.s.length)
            {
        this.cursor = c + w.s.length;
        if (w.method == null)
                {
                    return w.result;
                }
        var res = w.method(this);
        this.cursor = c + w.s.length;
        if (res)
                {
                    return w.result;
                }
        }
        i = w.substring_i;
        if (i < 0) return 0;
    }
        return -1; // not reachable
    }

    // find_among_b is for backwards processing. Same comments apply
    find_among_b (v )
    {
    var i = 0;
    var j = v.length;

    var c = this.cursor;
    var lb = this.limit_backward;

    var common_i = 0;
    var common_j = 0;

    var first_key_inspected = false;

    while (true)
        {
        var k = i + ((j - i) >> 1);
        var diff = 0;
        var common = common_i < common_j ? common_i : common_j;
        var w = v[k];
        var i2;
        for (i2 = w.s.length - 1 - common; i2 >= 0; i2--)
            {
        if (c - common == lb)
                {
            diff = -1;
            break;
        }
        diff = this.current.charCodeAt(c - 1 - common) - w.s.charCodeAt(i2);
        if (diff != 0) break;
        common++;
        }
        if (diff < 0)
            {
        j = k;
        common_j = common;
        }
            else
            {
        i = k;
        common_i = common;
        }
        if (j - i <= 1)
            {
        if (i > 0) break;
        if (j == i) break;
        if (first_key_inspected) break;
        first_key_inspected = true;
        }
    }
    while (true)
        {
        var w = v[i];
        if (common_i >= w.s.length)
            {
        this.cursor = c - w.s.length;
        if (w.method == null) return w.result;
        var res = w.method(this);
        this.cursor = c - w.s.length;
        if (res) return w.result;
        }
        i = w.substring_i;
        if (i < 0) return 0;
    }
        return -1; // not reachable
    }

    /* to replace chars between c_bra and c_ket in this.current by the
     * chars in s.
     */
    replace_s (c_bra, c_ket, s)
    {
    var adjustment = s.length - (c_ket - c_bra);
    this.current = this.current.slice(0, c_bra) + s + this.current.slice(c_ket);
    this.limit += adjustment;
    if (this.cursor >= c_ket) this.cursor += adjustment;
    else if (this.cursor > c_bra) this.cursor = c_bra;
    return adjustment;
    }

    slice_check ()
    {
        if (this.bra < 0 ||
            this.bra > this.ket ||
            this.ket > this.limit ||
            this.limit > this.current.length)
        {
            return false;
        }
        return true;
    }

    slice_from (s)
    {
        var result = false;
    if (this.slice_check())
        {
        this.replace_s(this.bra, this.ket, s);
            result = true;
        }
        return result;
    }

    slice_del ()
    {
    return this.slice_from("");
    }

    insert (c_bra, c_ket, s)
    {
        var adjustment = this.replace_s(c_bra, c_ket, s);
    if (c_bra <= this.bra) this.bra += adjustment;
    if (c_bra <= this.ket) this.ket += adjustment;
    }

    /* Copy the slice into the supplied StringBuffer */
    slice_to ()
    {
        var result = '';
    if (this.slice_check())
        {
            result = this.current.slice(this.bra, this.ket);
        }
        return result;
    }

    assign_to ()
    {
        return this.current.slice(0, this.limit);
    }

    stemWord (word)
    {
        this.setCurrent(word);
        this.stem();
        return this.getCurrent();
    }
}

exports.Porter2 = Porter2
